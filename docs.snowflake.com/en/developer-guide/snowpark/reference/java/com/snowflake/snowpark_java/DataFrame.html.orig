<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (11.0.22) on Wed Mar 27 20:04:07 UTC 2024 -->
<title>DataFrame (Snowpark Java API Reference 1.12.0)</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="dc.created" content="2024-03-27">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../jquery/jquery-ui.min.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../jquery-ui.overrides.css" title="Style">
<script type="text/javascript" src="../../../script.js"></script>
<script type="text/javascript" src="../../../jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../../../jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../../../jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../../../jquery/jquery-3.6.1.min.js"></script>
<script type="text/javascript" src="../../../jquery/jquery-ui.min.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="DataFrame (Snowpark Java API Reference 1.12.0)";
        }
    }
    catch(err) {
    }
//-->
var data = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../../../";
var useModuleDirectories = true;
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<header role="banner">
<nav role="navigation">
<div class="fixedNav">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/DataFrame.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-all.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
<div class="aboutLanguage"><div style="margin-top: 14px"><strong>                           Snowpark Java API Reference 1.12.0 <br/>                           <a style="text-transform: none" href="https://docs.snowflake.com/en/developer-guide/snowpark/java/index.html" target="_top">[Snowpark Developer Guide for Java]</a>                         </strong></div></div>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<ul class="navListSearch">
<li><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
</div>
<div class="navPadding">&nbsp;</div>
<script type="text/javascript"><!--
$('.navPadding').css('padding-top', $('.fixedNav').css("height"));
//-->
</script>
</nav>
</header>
<!-- ======== START OF CLASS DATA ======== -->
<main role="main">
<div class="header">
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">com.snowflake.snowpark_java</a></div>
<h2 title="Class DataFrame" class="title">Class DataFrame</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">java.lang.Object</a></li>
<li>
<ul class="inheritance">
<li>com.snowflake.snowpark.internal.Logging</li>
<li>
<ul class="inheritance">
<li>com.snowflake.snowpark_java.DataFrame</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd><code><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html?is-external=true" title="class or interface in java.lang" class="externalLink">Cloneable</a></code></dd>
</dl>
<dl>
<dt>Direct Known Subclasses:</dt>
<dd><code><a href="CopyableDataFrame.html" title="class in com.snowflake.snowpark_java">CopyableDataFrame</a></code>, <code><a href="HasCachedResult.html" title="class in com.snowflake.snowpark_java">HasCachedResult</a></code>, <code><a href="Updatable.html" title="class in com.snowflake.snowpark_java">Updatable</a></code></dd>
</dl>
<hr>
<pre>public class <span class="typeNameLabel">DataFrame</span>
extends com.snowflake.snowpark.internal.Logging
implements <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html?is-external=true" title="class or interface in java.lang" class="externalLink">Cloneable</a></pre>
<div class="block">Represents a lazily-evaluated relational dataset that contains a collection of <code>Row</code>
 objects with columns defined by a schema (column name and type).

 <p>A <code>DataFrame</code> is considered lazy because it encapsulates the computation or query
 required to produce a relational dataset. The computation is not performed until you call a
 method that performs an action (e.g. <code>collect</code>).</div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.8.0</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<section>
<ul class="blockList">
<li class="blockList"><a id="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<ul class="blockList">
<li class="blockList"><a id="fields.inherited.from.class.com.snowflake.snowpark.internal.Logging">
<!--   -->
</a>
<h3>Fields inherited from class&nbsp;com.snowflake.snowpark.internal.Logging</h3>
<code>logName</code></li>
</ul>
</li>
</ul>
</section>
<!-- ========== METHOD SUMMARY =========== -->
<section>
<ul class="blockList">
<li class="blockList"><a id="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#agg(com.snowflake.snowpark_java.Column...)">agg</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;exprs)</code></th>
<td class="colLast">
<div class="block">Aggregate the data in the DataFrame.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#alias(java.lang.String)">alias</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;alias)</code></th>
<td class="colLast">
<div class="block">Returns the current DataFrame aliased as the input alias name.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code><a href="DataFrameAsyncActor.html" title="class in com.snowflake.snowpark_java">DataFrameAsyncActor</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#async()">async</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns a DataFrameAsyncActor object that can be used to execute DataFrame actions
 asynchronously.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code><a href="HasCachedResult.html" title="class in com.snowflake.snowpark_java">HasCachedResult</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#cacheResult()">cacheResult</a></span>()</code></th>
<td class="colLast">
<div class="block">Caches the content of this DataFrame to create a new cached DataFrame.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#clone()">clone</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns a clone of this DataFrame.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code><a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#col(java.lang.String)">col</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;colName)</code></th>
<td class="colLast">
<div class="block">Retrieves a reference to a column in this DataFrame.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code><a href="Row.html" title="class in com.snowflake.snowpark_java">Row</a>[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#collect()">collect</a></span>()</code></th>
<td class="colLast">
<div class="block">Executes the query representing this DataFrame and returns the result as an array of Row
 objects.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>long</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#count()">count</a></span>()</code></th>
<td class="colLast">
<div class="block">Executes the query representing this DataFrame and returns the number of rows in the result
 (similar to the COUNT function in SQL).</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#createOrReplaceTempView(java.lang.String)">createOrReplaceTempView</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewName)</code></th>
<td class="colLast">
<div class="block">Creates a temporary view that returns the same results as this DataFrame.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#createOrReplaceTempView(java.lang.String%5B%5D)">createOrReplaceTempView</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;multipartIdentifier)</code></th>
<td class="colLast">
<div class="block">Creates a temporary view that returns the same results as this DataFrame.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#createOrReplaceView(java.lang.String)">createOrReplaceView</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewName)</code></th>
<td class="colLast">
<div class="block">Creates a view that captures the computation expressed by this DataFrame.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#createOrReplaceView(java.lang.String%5B%5D)">createOrReplaceView</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;multipartIdentifier)</code></th>
<td class="colLast">
<div class="block">Creates a view that captures the computation expressed by this DataFrame.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#crossJoin(com.snowflake.snowpark_java.DataFrame)">crossJoin</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right)</code></th>
<td class="colLast">
<div class="block">Performs a cross join, which returns the cartesian product of the current DataFrame and another
 DataFrame (`right`).</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#cube(com.snowflake.snowpark_java.Column...)">cube</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;cols)</code></th>
<td class="colLast">
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 CUBE</a> on the DataFrame.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#cube(java.lang.String...)">cube</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</code></th>
<td class="colLast">
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 CUBE</a> on the DataFrame.</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#distinct()">distinct</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains only the rows with distinct values from the current
 DataFrame.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#drop(com.snowflake.snowpark_java.Column...)">drop</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;columns)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that excludes the columns with the specified names from the output.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#drop(java.lang.String...)">drop</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;columnNames)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that excludes the columns with the specified names from the output.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#dropDuplicates(java.lang.String...)">dropDuplicates</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</code></th>
<td class="colLast">
<div class="block">Creates a new DataFrame by removing duplicated rows on given subset of columns.</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#except(com.snowflake.snowpark_java.DataFrame)">except</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains all the rows from the current DataFrame except for the
 rows that also appear in another DataFrame (`other`).</div>
</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#explain()">explain</a></span>()</code></th>
<td class="colLast">
<div class="block">Prints the list of queries that will be executed to evaluate this DataFrame.</div>
</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#filter(com.snowflake.snowpark_java.Column)">filter</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;condition)</code></th>
<td class="colLast">
<div class="block">Filters rows based on the specified conditional expression (similar to WHERE in SQL).</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html?is-external=true" title="class or interface in java.util" class="externalLink">Optional</a>&lt;<a href="Row.html" title="class in com.snowflake.snowpark_java">Row</a>&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#first()">first</a></span>()</code></th>
<td class="colLast">
<div class="block">Executes the query representing this DataFrame and returns the first row of results.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code><a href="Row.html" title="class in com.snowflake.snowpark_java">Row</a>[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#first(int)">first</a></span>&#8203;(int&nbsp;n)</code></th>
<td class="colLast">
<div class="block">Executes the query representing this DataFrame and returns the first <code>n</code> rows of the
 results.</div>
</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#flatten(com.snowflake.snowpark_java.Column)">flatten</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;input)</code></th>
<td class="colLast">
<div class="block">Flattens (explodes) compound values into multiple rows (similar to the SQL <a href="https://docs.snowflake.com/en/sql-reference/functions/flatten.html">FLATTEN</a></div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#flatten(com.snowflake.snowpark_java.Column,java.lang.String,boolean,boolean,java.lang.String)">flatten</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;input,
       <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;path,
       boolean&nbsp;outer,
       boolean&nbsp;recursive,
       <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;mode)</code></th>
<td class="colLast">
<div class="block">Flattens (explodes) compound values into multiple rows (similar to the SQL <a href="https://docs.snowflake.com/en/sql-reference/functions/flatten.html">FLATTEN</a></div>
</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#groupBy(com.snowflake.snowpark_java.Column...)">groupBy</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;cols)</code></th>
<td class="colLast">
<div class="block">Groups rows by the columns specified by expressions (similar to GROUP BY in SQL).</div>
</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#groupBy(java.lang.String...)">groupBy</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</code></th>
<td class="colLast">
<div class="block">Groups rows by the columns specified by name (similar to GROUP BY in SQL).</div>
</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#groupByGroupingSets(com.snowflake.snowpark_java.GroupingSets...)">groupByGroupingSets</a></span>&#8203;(<a href="GroupingSets.html" title="class in com.snowflake.snowpark_java">GroupingSets</a>...&nbsp;sets)</code></th>
<td class="colLast">
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 GROUPING SETS</a> on the DataFrame.</div>
</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#intersect(com.snowflake.snowpark_java.DataFrame)">intersect</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains the intersection of rows from the current DataFrame and
 another DataFrame (`other`).</div>
</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.Column)">join</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;func)</code></th>
<td class="colLast">
<div class="block">Joins the current DataFrame with the output of the specified table function `func`.</div>
</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.Column,com.snowflake.snowpark_java.Column%5B%5D,com.snowflake.snowpark_java.Column%5B%5D)">join</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;func,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;partitionBy,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;orderBy)</code></th>
<td class="colLast">
<div class="block">Joins the current DataFrame with the output of the specified table function `func`.</div>
</td>
</tr>
<tr id="i32" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.DataFrame)">join</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right)</code></th>
<td class="colLast">
<div class="block">Performs a default inner join of the current DataFrame and another DataFrame (`right`).</div>
</td>
</tr>
<tr id="i33" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.DataFrame,com.snowflake.snowpark_java.Column)">join</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;joinExpr)</code></th>
<td class="colLast">
<div class="block">Performs a default inner join of the current DataFrame and another DataFrame (`right`) using
 the join condition specified in an expression (`joinExpr`).</div>
</td>
</tr>
<tr id="i34" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.DataFrame,com.snowflake.snowpark_java.Column,java.lang.String)">join</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;joinExpr,
    <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;joinType)</code></th>
<td class="colLast">
<div class="block">Performs a join of the specified type (`joinType`) with the current DataFrame and another
 DataFrame (`right`) using the join condition specified in an expression (`joinExpr`).</div>
</td>
</tr>
<tr id="i35" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.DataFrame,java.lang.String)">join</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
    <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;usingColumn)</code></th>
<td class="colLast">
<div class="block">Performs a default inner join of the current DataFrame and another DataFrame (`right`) on a
 column (`usingColumn`).</div>
</td>
</tr>
<tr id="i36" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.DataFrame,java.lang.String%5B%5D)">join</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
    <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;usingColumns)</code></th>
<td class="colLast">
<div class="block">Performs a default inner join of the current DataFrame and another DataFrame (`right`) on a
 list of columns (`usingColumns`).</div>
</td>
</tr>
<tr id="i37" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.DataFrame,java.lang.String%5B%5D,java.lang.String)">join</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
    <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;usingColumns,
    <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;joinType)</code></th>
<td class="colLast">
<div class="block">Performs a join of the specified type (`joinType`) with the current DataFrame and another
 DataFrame (`right`) on a list of columns (`usingColumns`).</div>
</td>
</tr>
<tr id="i38" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.TableFunction,com.snowflake.snowpark_java.Column...)">join</a></span>&#8203;(<a href="TableFunction.html" title="class in com.snowflake.snowpark_java">TableFunction</a>&nbsp;func,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;args)</code></th>
<td class="colLast">
<div class="block">Joins the current DataFrame with the output of the specified table function `func`.</div>
</td>
</tr>
<tr id="i39" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.TableFunction,com.snowflake.snowpark_java.Column%5B%5D,com.snowflake.snowpark_java.Column%5B%5D,com.snowflake.snowpark_java.Column%5B%5D)">join</a></span>&#8203;(<a href="TableFunction.html" title="class in com.snowflake.snowpark_java">TableFunction</a>&nbsp;func,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;args,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;partitionBy,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;orderBy)</code></th>
<td class="colLast">
<div class="block">Joins the current DataFrame with the output of the specified user-defined table function (UDTF)
 `func`.</div>
</td>
</tr>
<tr id="i40" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.TableFunction,java.util.Map)">join</a></span>&#8203;(<a href="TableFunction.html" title="class in com.snowflake.snowpark_java">TableFunction</a>&nbsp;func,
    <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util" class="externalLink">Map</a>&lt;<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>,&#8203;<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&gt;&nbsp;args)</code></th>
<td class="colLast">
<div class="block">Joins the current DataFrame with the output of the specified table function `func` that takes
 named parameters (e.g.</div>
</td>
</tr>
<tr id="i41" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#join(com.snowflake.snowpark_java.TableFunction,java.util.Map,com.snowflake.snowpark_java.Column%5B%5D,com.snowflake.snowpark_java.Column%5B%5D)">join</a></span>&#8203;(<a href="TableFunction.html" title="class in com.snowflake.snowpark_java">TableFunction</a>&nbsp;func,
    <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util" class="externalLink">Map</a>&lt;<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>,&#8203;<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&gt;&nbsp;args,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;partitionBy,
    <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;orderBy)</code></th>
<td class="colLast">
<div class="block">Joins the current DataFrame with the output of the specified user-defined table function (UDTF)
 `func`.</div>
</td>
</tr>
<tr id="i42" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#limit(int)">limit</a></span>&#8203;(int&nbsp;n)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains at most `n` rows from the current DataFrame (similar to
 LIMIT in SQL).</div>
</td>
</tr>
<tr id="i43" class="rowColor">
<td class="colFirst"><code><a href="DataFrameNaFunctions.html" title="class in com.snowflake.snowpark_java">DataFrameNaFunctions</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#na()">na</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns a <code>DataFrameNaFunctions</code> object that provides functions for handling missing
 values in the DataFrame.</div>
</td>
</tr>
<tr id="i44" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#naturalJoin(com.snowflake.snowpark_java.DataFrame)">naturalJoin</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right)</code></th>
<td class="colLast">
<div class="block">Performs a natural join (a default inner join) of the current DataFrame and another DataFrame
 (`right`).</div>
</td>
</tr>
<tr id="i45" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#naturalJoin(com.snowflake.snowpark_java.DataFrame,java.lang.String)">naturalJoin</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
           <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;joinType)</code></th>
<td class="colLast">
<div class="block">Performs a natural join of the specified type (`joinType`) with the current DataFrame and
 another DataFrame (`right`).</div>
</td>
</tr>
<tr id="i46" class="altColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#pivot(com.snowflake.snowpark_java.Column,java.lang.Object%5B%5D)">pivot</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;pivotColumn,
     <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a>[]&nbsp;values)</code></th>
<td class="colLast">
<div class="block">Rotates this DataFrame by turning the unique values from one column in the input expression
 into multiple columns and aggregating results where required on any remaining column values.</div>
</td>
</tr>
<tr id="i47" class="rowColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#pivot(java.lang.String,java.lang.Object%5B%5D)">pivot</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;pivotColumn,
     <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a>[]&nbsp;values)</code></th>
<td class="colLast">
<div class="block">Rotates this DataFrame by turning the unique values from one column in the input expression
 into multiple columns and aggregating results where required on any remaining column values.</div>
</td>
</tr>
<tr id="i48" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>[]</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#randomSplit(double%5B%5D)">randomSplit</a></span>&#8203;(double[]&nbsp;weights)</code></th>
<td class="colLast">
<div class="block">Randomly splits the current DataFrame into separate DataFrames, using the specified weights.</div>
</td>
</tr>
<tr id="i49" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#rename(java.lang.String,com.snowflake.snowpark_java.Column)">rename</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;newName,
      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;col)</code></th>
<td class="colLast">
<div class="block">Returns a DataFrame with the specified column `col` renamed as `newName`.</div>
</td>
</tr>
<tr id="i50" class="altColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#rollup(com.snowflake.snowpark_java.Column...)">rollup</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;cols)</code></th>
<td class="colLast">
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 ROLLUP</a> on the DataFrame.</div>
</td>
</tr>
<tr id="i51" class="rowColor">
<td class="colFirst"><code><a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#rollup(java.lang.String...)">rollup</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</code></th>
<td class="colLast">
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 ROLLUP</a> on the DataFrame.</div>
</td>
</tr>
<tr id="i52" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#sample(double)">sample</a></span>&#8203;(double&nbsp;probabilityFraction)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains a sampling of rows from the current DataFrame.</div>
</td>
</tr>
<tr id="i53" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#sample(long)">sample</a></span>&#8203;(long&nbsp;num)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame with a sample of N rows from the underlying DataFrame.</div>
</td>
</tr>
<tr id="i54" class="altColor">
<td class="colFirst"><code><a href="types/StructType.html" title="class in com.snowflake.snowpark_java.types">StructType</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#schema()">schema</a></span>()</code></th>
<td class="colLast">
<div class="block">Retrieves the definition of the columns in this DataFrame (the "relational schema" for the
 DataFrame).</div>
</td>
</tr>
<tr id="i55" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#select(com.snowflake.snowpark_java.Column...)">select</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;columns)</code></th>
<td class="colLast">
<div class="block">Generates a new DataFrame with the specified Column expressions as output (similar to SELECT in
 SQL).</div>
</td>
</tr>
<tr id="i56" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#select(java.lang.String...)">select</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;columnNames)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame with a subset of named columns (similar to SELECT in SQL).</div>
</td>
</tr>
<tr id="i57" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#show()">show</a></span>()</code></th>
<td class="colLast">
<div class="block">Evaluates this DataFrame and prints out the first ten rows.</div>
</td>
</tr>
<tr id="i58" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#show(int)">show</a></span>&#8203;(int&nbsp;n)</code></th>
<td class="colLast">
<div class="block">Evaluates this DataFrame and prints out the first `''n''` rows.</div>
</td>
</tr>
<tr id="i59" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#show(int,int)">show</a></span>&#8203;(int&nbsp;n,
    int&nbsp;maxWidth)</code></th>
<td class="colLast">
<div class="block">Evaluates this DataFrame and prints out the first `''n''` rows with the specified maximum
 number of characters per column.</div>
</td>
</tr>
<tr id="i60" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#sort(com.snowflake.snowpark_java.Column...)">sort</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;sortExprs)</code></th>
<td class="colLast">
<div class="block">Sorts a DataFrame by the specified expressions (similar to ORDER BY in SQL).</div>
</td>
</tr>
<tr id="i61" class="rowColor">
<td class="colFirst"><code><a href="DataFrameStatFunctions.html" title="class in com.snowflake.snowpark_java">DataFrameStatFunctions</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#stat()">stat</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns a DataFrameStatFunctions object that provides statistic functions.</div>
</td>
</tr>
<tr id="i62" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#toDF(java.lang.String...)">toDF</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</code></th>
<td class="colLast">
<div class="block">Creates a new DataFrame containing the data in the current DataFrame but in columns with the
 specified names.</div>
</td>
</tr>
<tr id="i63" class="rowColor">
<td class="colFirst"><code><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util" class="externalLink">Iterator</a>&lt;<a href="Row.html" title="class in com.snowflake.snowpark_java">Row</a>&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#toLocalIterator()">toLocalIterator</a></span>()</code></th>
<td class="colLast">
<div class="block">Executes the query representing this DataFrame and returns an iterator of Row objects that you
 can use to retrieve the results.</div>
</td>
</tr>
<tr id="i64" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#union(com.snowflake.snowpark_java.DataFrame)">union</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains all the rows in the current DataFrame and another
 DataFrame (`other`), excluding any duplicate rows.</div>
</td>
</tr>
<tr id="i65" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#unionAll(com.snowflake.snowpark_java.DataFrame)">unionAll</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains all the rows in the current DataFrame and another
 DataFrame (`other`), including any duplicate rows.</div>
</td>
</tr>
<tr id="i66" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#unionAllByName(com.snowflake.snowpark_java.DataFrame)">unionAllByName</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains all the rows in the current DataFrame and another
 DataFrame (`other`), including any duplicate rows.</div>
</td>
</tr>
<tr id="i67" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#unionByName(com.snowflake.snowpark_java.DataFrame)">unionByName</a></span>&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</code></th>
<td class="colLast">
<div class="block">Returns a new DataFrame that contains all the rows in the current DataFrame and another
 DataFrame (`other`), excluding any duplicate rows.</div>
</td>
</tr>
<tr id="i68" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#where(com.snowflake.snowpark_java.Column)">where</a></span>&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;condition)</code></th>
<td class="colLast">
<div class="block">Filters rows based on the specified conditional expression (similar to WHERE in SQL).</div>
</td>
</tr>
<tr id="i69" class="rowColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#withColumn(java.lang.String,com.snowflake.snowpark_java.Column)">withColumn</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;colName,
          <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;col)</code></th>
<td class="colLast">
<div class="block">Returns a DataFrame with an additional column with the specified name (`colName`).</div>
</td>
</tr>
<tr id="i70" class="altColor">
<td class="colFirst"><code><a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#withColumns(java.lang.String%5B%5D,com.snowflake.snowpark_java.Column%5B%5D)">withColumns</a></span>&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;colNames,
           <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;values)</code></th>
<td class="colLast">
<div class="block">Returns a DataFrame with additional columns with the specified names (`colNames`).</div>
</td>
</tr>
<tr id="i71" class="rowColor">
<td class="colFirst"><code><a href="DataFrameWriter.html" title="class in com.snowflake.snowpark_java">DataFrameWriter</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#write()">write</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns a DataFrameWriter object that you can use to write the data in the DataFrame to any
 supported destination.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a id="methods.inherited.from.class.com.snowflake.snowpark.internal.Logging">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;com.snowflake.snowpark.internal.Logging</h3>
<code>log, logDebug, logDebug, logError, logError, logInfo, logInfo, logTrace, logTrace, logWarning, logWarning, maskSecrets, maskSecrets</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a id="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a></h3>
<code><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#equals-java.lang.Object-" title="class or interface in java.lang" class="externalLink">equals</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#finalize--" title="class or interface in java.lang" class="externalLink">finalize</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#getClass--" title="class or interface in java.lang" class="externalLink">getClass</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#hashCode--" title="class or interface in java.lang" class="externalLink">hashCode</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#notify--" title="class or interface in java.lang" class="externalLink">notify</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#notifyAll--" title="class or interface in java.lang" class="externalLink">notifyAll</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#toString--" title="class or interface in java.lang" class="externalLink">toString</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#wait--" title="class or interface in java.lang" class="externalLink">wait</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#wait-long-" title="class or interface in java.lang" class="externalLink">wait</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#wait-long-int-" title="class or interface in java.lang" class="externalLink">wait</a></code></li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ METHOD DETAIL ========== -->
<section>
<ul class="blockList">
<li class="blockList"><a id="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a id="schema()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>schema</h4>
<pre class="methodSignature">public&nbsp;<a href="types/StructType.html" title="class in com.snowflake.snowpark_java.types">StructType</a>&nbsp;schema()</pre>
<div class="block">Retrieves the definition of the columns in this DataFrame (the "relational schema" for the
 DataFrame).</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A StructType object representing the DataFrame's schema</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="cacheResult()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cacheResult</h4>
<pre class="methodSignature">public&nbsp;<a href="HasCachedResult.html" title="class in com.snowflake.snowpark_java">HasCachedResult</a>&nbsp;cacheResult()</pre>
<div class="block">Caches the content of this DataFrame to create a new cached DataFrame.

 <p>All subsequent operations on the returned cached DataFrame are performed on the cached data
 and have no effect on the original DataFrame.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A HasCachedResult</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="explain()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>explain</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;explain()</pre>
<div class="block">Prints the list of queries that will be executed to evaluate this DataFrame. Prints the query
 execution plan if only one SELECT/DML/DDL statement will be executed.

 <p>For more information about the query execution plan, see the <a href="https://docs.snowflake.com/en/sql-reference/sql/explain.html">EXPLAIN</a> command.</div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="toDF(java.lang.String...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toDF</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;toDF&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</pre>
<div class="block">Creates a new DataFrame containing the data in the current DataFrame but in columns with the
 specified names. The number of column names that you pass in must match the number of columns
 in the current DataFrame.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colNames</code> - A list of column names.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="withColumn(java.lang.String,com.snowflake.snowpark_java.Column)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>withColumn</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;withColumn&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;colName,
                            <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;col)</pre>
<div class="block">Returns a DataFrame with an additional column with the specified name (`colName`). The column
 is computed by using the specified expression (`col`).

 <p>If a column with the same name already exists in the DataFrame, that column is replaced by
 the new column.

 <p>This example adds a new column named `mean_price` that contains the mean of the existing
 `price` column in the DataFrame.

 <p>{{{ DataFrame dfWithMeanPriceCol = df.withColumn("mean_price",
 Functions.mean(df.col("price"))); }}}</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colName</code> - The name of the column to add or replace.</dd>
<dd><code>col</code> - The Column to add or replace.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="withColumns(java.lang.String[],com.snowflake.snowpark_java.Column[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>withColumns</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;withColumns&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;colNames,
                             <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;values)</pre>
<div class="block">Returns a DataFrame with additional columns with the specified names (`colNames`). The columns
 are computed by using the specified expressions (`cols`).

 <p>If columns with the same names already exist in the DataFrame, those columns are replaced by
 the new columns.

 <p>This example adds new columns named `mean_price` and `avg_price` that contain the mean and
 average of the existing `price` column.

 <pre><code>
     DataFrame dfWithAddedColumns = df.withColumns(
       new String[]{"mean_price", "avg_price"},
       new Column[]{Functions.mean(df.col("price")),
         Functions.avg(df.col("price"))}
     );
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colNames</code> - A list of the names of the columns to add or replace.</dd>
<dd><code>values</code> - A list of the Column objects to add or replace.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="rename(java.lang.String,com.snowflake.snowpark_java.Column)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>rename</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;rename&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;newName,
                        <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;col)</pre>
<div class="block">Returns a DataFrame with the specified column `col` renamed as `newName`.

 <p>This example renames the column `A` as `NEW_A` in the DataFrame.

 <pre><code>
 DataFrame df = session.sql("select 1 as A, 2 as B");
 DateFrame dfRenamed = df.rename("NEW_A", df.col("A"));
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>newName</code> - The new name for the column</dd>
<dd><code>col</code> - The Column to be renamed</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="select(com.snowflake.snowpark_java.Column...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>select</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;select&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;columns)</pre>
<div class="block">Generates a new DataFrame with the specified Column expressions as output (similar to SELECT in
 SQL). Only the Columns specified as arguments will be present in the resulting DataFrame.

 <p>You can use any Column expression.

 <p>For example:

 <pre><code>
 import com.snowflake.snowpark_java.Functions;

 DataFrame dfSelected =
   df.select(df.col("col1"), Functions.lit("abc"), df.col("col1").plus(df.col("col2")));
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>columns</code> - The arguments of this select function</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The result DataFrame object</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="select(java.lang.String...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>select</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;select&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;columnNames)</pre>
<div class="block">Returns a new DataFrame with a subset of named columns (similar to SELECT in SQL).

 <p>For example:

 <p><code>DataFrame dfSelected = df.select("col1", "col2", "col3");</code></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>columnNames</code> - A list of the names of columns to return.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="drop(com.snowflake.snowpark_java.Column...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>drop</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;drop&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;columns)</pre>
<div class="block">Returns a new DataFrame that excludes the columns with the specified names from the output.

 <p>This is functionally equivalent to calling <code>select()</code> and passing in all columns
 except the ones to exclude.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>columns</code> - An array of columns to exclude.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>com.snowflake.snowpark.SnowparkClientException</code> - if the resulting DataFrame contains no
     output columns.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="drop(java.lang.String...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>drop</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;drop&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;columnNames)</pre>
<div class="block">Returns a new DataFrame that excludes the columns with the specified names from the output.

 <p>This is functionally equivalent to calling <code>select()</code> and passing in all columns
 except the ones to exclude.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>columnNames</code> - An array of the names of columns to exclude.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>com.snowflake.snowpark.SnowparkClientException</code> - if the resulting DataFrame contains no
     output columns.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="filter(com.snowflake.snowpark_java.Column)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>filter</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;filter&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;condition)</pre>
<div class="block">Filters rows based on the specified conditional expression (similar to WHERE in SQL).

 <p>For example:

 <pre><code>
 import com.snowflake.snowpark_java.Functions;

 DataFrame dfFiltered =
   df.filter(df.col("colA").gt(Functions.lit(1)));
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>condition</code> - The filter condition defined as an expression on columns</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A filtered DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="where(com.snowflake.snowpark_java.Column)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>where</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;where&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;condition)</pre>
<div class="block">Filters rows based on the specified conditional expression (similar to WHERE in SQL). This is
 equivalent to calling filter function.

 <p>For example:

 <pre><code>
 import com.snowflake.snowpark_java.Functions;

 DataFrame dfFiltered =
   df.where(df.col("colA").gt(Functions.lit(1)));
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>condition</code> - The filter condition defined as an expression on columns</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A filtered DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="agg(com.snowflake.snowpark_java.Column...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>agg</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;agg&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;exprs)</pre>
<div class="block">Aggregate the data in the DataFrame. Use this method if you don't need to group the data
 (`groupBy`).

 <p>For the input value, pass in expressions that apply aggregation functions to columns
 (functions that are defined in the <code>functions</code> object).

 <p>The following example calculates the maximum value of the `num_sales` column and the mean
 value of the `price` column:

 <p>For example:

 <p><code>df.agg(Functions.max(df.col("num_sales")), Functions.mean(df.col("price")))</code></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>exprs</code> - A list of expressions on columns.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="distinct()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>distinct</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;distinct()</pre>
<div class="block">Returns a new DataFrame that contains only the rows with distinct values from the current
 DataFrame.

 <p>This is equivalent to performing a SELECT DISTINCT in SQL.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="dropDuplicates(java.lang.String...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dropDuplicates</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;dropDuplicates&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</pre>
<div class="block">Creates a new DataFrame by removing duplicated rows on given subset of columns. If no subset of
 columns specified, this function is same as <code>distinct()</code> function. The result is
 non-deterministic when removing duplicated rows from the subset of columns but not all columns.
 For example: Supposes we have a DataFrame `df`, which contains three rows (a, b, c): (1, 1, 1),
 (1, 1, 2), (1, 2, 3) The result of df.dropDuplicates("a", "b") can be either (1, 1, 1), (1, 2,
 3) or (1, 1, 2), (1, 2, 3)</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colNames</code> - A list of column names</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="union(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>union</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;union&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</pre>
<div class="block">Returns a new DataFrame that contains all the rows in the current DataFrame and another
 DataFrame (`other`), excluding any duplicate rows. Both input DataFrames must contain the same
 number of columns.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>other</code> - The other DataFrame that contains the rows to include.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="unionAll(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unionAll</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;unionAll&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</pre>
<div class="block">Returns a new DataFrame that contains all the rows in the current DataFrame and another
 DataFrame (`other`), including any duplicate rows. Both input DataFrames must contain the same
 number of columns.

 <p>For example:

 <p><code>DataFrame df1and2 = df1.unionAll(df2);</code></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>other</code> - The other DataFrame that contains the rows to include.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="unionByName(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unionByName</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;unionByName&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</pre>
<div class="block">Returns a new DataFrame that contains all the rows in the current DataFrame and another
 DataFrame (`other`), excluding any duplicate rows.

 <p>This method matches the columns in the two DataFrames by their names, not by their
 positions. The columns in the other DataFrame are rearranged to match the order of columns in
 the current DataFrame.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>other</code> - The other DataFrame that contains the rows to include.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="unionAllByName(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unionAllByName</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;unionAllByName&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</pre>
<div class="block">Returns a new DataFrame that contains all the rows in the current DataFrame and another
 DataFrame (`other`), including any duplicate rows.

 <p>This method matches the columns in the two DataFrames by their names, not by their
 positions. The columns in the other DataFrame are rearranged to match the order of columns in
 the current DataFrame.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>other</code> - The other DataFrame that contains the rows to include.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="intersect(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>intersect</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;intersect&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</pre>
<div class="block">Returns a new DataFrame that contains the intersection of rows from the current DataFrame and
 another DataFrame (`other`). Duplicate rows are eliminated.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>other</code> - The other DataFrame that contains the rows to use for the intersection.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="except(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>except</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;except&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;other)</pre>
<div class="block">Returns a new DataFrame that contains all the rows from the current DataFrame except for the
 rows that also appear in another DataFrame (`other`). Duplicate rows are eliminated.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>other</code> - The DataFrame that contains the rows to exclude.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="clone()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clone</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;clone()</pre>
<div class="block">Returns a clone of this DataFrame.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true#clone--" title="class or interface in java.lang" class="externalLink">clone</a></code>&nbsp;in class&nbsp;<code><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right)</pre>
<div class="block">Performs a default inner join of the current DataFrame and another DataFrame (`right`).

 <p>Because this method does not specify a join condition, the returned DataFrame is a cartesian
 product of the two DataFrames.

 <p>If the current and `right` DataFrames have columns with the same name, and you need to refer
 to one of these columns in the returned DataFrame, use the <code>col</code> function on the current
 or `right` DataFrame to disambiguate references to these columns.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.1.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.DataFrame,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
                      <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;usingColumn)</pre>
<div class="block">Performs a default inner join of the current DataFrame and another DataFrame (`right`) on a
 column (`usingColumn`).

 <p>The method assumes that the `usingColumn` column has the same meaning in the left and right
 DataFrames.

 <p>For example: <code>left.join(right, "col")</code></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dd><code>usingColumn</code> - The name of the column to use for the join.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.DataFrame,java.lang.String[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
                      <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;usingColumns)</pre>
<div class="block">Performs a default inner join of the current DataFrame and another DataFrame (`right`) on a
 list of columns (`usingColumns`).

 <p>The method assumes that the columns in `usingColumns` have the same meaning in the left and
 right DataFrames.

 <p>For example: <code>left.join(right, new String[]{"col1", "col2"})</code></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dd><code>usingColumns</code> - A list of the names of the columns to use for the join.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.DataFrame,java.lang.String[],java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
                      <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;usingColumns,
                      <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;joinType)</pre>
<div class="block">Performs a join of the specified type (`joinType`) with the current DataFrame and another
 DataFrame (`right`) on a list of columns (`usingColumns`).

 <p>The method assumes that the columns in `usingColumns` have the same meaning in the left and
 right DataFrames.

 <p>For example:

 <pre><code>
 left.join(right, new String[]{"col"}, "left");
 left.join(right, new String[]{"col1", "col2}, "outer");
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dd><code>usingColumns</code> - A list of the names of the columns to use for the join.</dd>
<dd><code>joinType</code> - The type of join (e.g. <code>"right"</code>, <code>"outer"</code>, etc.).</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.DataFrame,com.snowflake.snowpark_java.Column)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;joinExpr)</pre>
<div class="block">Performs a default inner join of the current DataFrame and another DataFrame (`right`) using
 the join condition specified in an expression (`joinExpr`).

 <p>To disambiguate columns with the same name in the left DataFrame and right DataFrame, use
 the <code>col()</code> method of each DataFrame. You can use this approach to disambiguate columns
 in the `joinExpr` parameter and to refer to columns in the returned DataFrame.

 <p>For example: <code>df1.join(df2, df1.col("col1").equal_to(df2.col("col2")))</code>

 <p>If you need to join a DataFrame with itself, keep in mind that there is no way to
 distinguish between columns on the left and right sides in a join expression. For example:

 <p><code>df.join(df, df.col("a").equal_to(df.col("b")))</code> As a workaround, you can either
 construct the left and right DataFrames separately, or you can call a <code>join(DataFrame,
 String[])</code> method that allows you to pass in 'usingColumns' parameter.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dd><code>joinExpr</code> - Expression that specifies the join condition.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.DataFrame,com.snowflake.snowpark_java.Column,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;joinExpr,
                      <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;joinType)</pre>
<div class="block">Performs a join of the specified type (`joinType`) with the current DataFrame and another
 DataFrame (`right`) using the join condition specified in an expression (`joinExpr`).

 <p>To disambiguate columns with the same name in the left DataFrame and right DataFrame, use
 the <code>col()</code> method of each DataFrame. You can use this approach to disambiguate columns
 in the `joinExpr` parameter and to refer to columns in the returned DataFrame.

 <p>For example: <code>df1.join(df2, df1.col("col1").equal_to(df2.col("col2")))</code>

 <p>If you need to join a DataFrame with itself, keep in mind that there is no way to
 distinguish between columns on the left and right sides in a join expression. For example:

 <p><code>df.join(df, df.col("a").equal_to(df.col("b")))</code> As a workaround, you can either
 construct the left and right DataFrames separately, or you can call a <code>join(DataFrame,
 String[])</code> method that allows you to pass in 'usingColumns' parameter.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dd><code>joinExpr</code> - Expression that specifies the join condition.</dd>
<dd><code>joinType</code> - The type of join (e.g. <code>"right"</code>, <code>"outer"</code>, etc.).</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="crossJoin(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>crossJoin</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;crossJoin&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right)</pre>
<div class="block">Performs a cross join, which returns the cartesian product of the current DataFrame and another
 DataFrame (`right`).

 <p>If the current and `right` DataFrames have columns with the same name, and you need to refer
 to one of these columns in the returned DataFrame, use the <code>col</code> function on the current
 or `right` DataFrame to disambiguate references to these columns.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="naturalJoin(com.snowflake.snowpark_java.DataFrame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>naturalJoin</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;naturalJoin&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right)</pre>
<div class="block">Performs a natural join (a default inner join) of the current DataFrame and another DataFrame
 (`right`).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="naturalJoin(com.snowflake.snowpark_java.DataFrame,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>naturalJoin</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;naturalJoin&#8203;(<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;right,
                             <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;joinType)</pre>
<div class="block">Performs a natural join of the specified type (`joinType`) with the current DataFrame and
 another DataFrame (`right`).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>right</code> - The other DataFrame to join.</dd>
<dd><code>joinType</code> - The type of join (e.g. <code>"right"</code>, <code>"outer"</code>, etc.).</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="sort(com.snowflake.snowpark_java.Column...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sort</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;sort&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;sortExprs)</pre>
<div class="block">Sorts a DataFrame by the specified expressions (similar to ORDER BY in SQL).

 <p>For example:

 <pre><code>
 DataFrame dfSorted = df.sort(df.col("colA"), df.col("colB").desc);
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sortExprs</code> - A list of Column expressions for sorting the DataFrame</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The sorted DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="limit(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>limit</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;limit&#8203;(int&nbsp;n)</pre>
<div class="block">Returns a new DataFrame that contains at most `n` rows from the current DataFrame (similar to
 LIMIT in SQL).

 <p>Note that this is a transformation method and not an action method.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>n</code> - Number of rows to return.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="groupBy(com.snowflake.snowpark_java.Column...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>groupBy</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;groupBy&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;cols)</pre>
<div class="block">Groups rows by the columns specified by expressions (similar to GROUP BY in SQL).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>cols</code> - An array of expressions on columns.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame that you can use to perform aggregations on each group of
     data.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="groupBy(java.lang.String...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>groupBy</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;groupBy&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</pre>
<div class="block">Groups rows by the columns specified by name (similar to GROUP BY in SQL).

 <p>This method returns a RelationalGroupedDataFrame that you can use to perform aggregations on
 each group of data.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colNames</code> - A list of the names of columns to group by.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame that you can use to perform aggregations on each group of
     data.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.1.0</dd>
</dl>
</li>
</ul>
<a id="rollup(com.snowflake.snowpark_java.Column...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>rollup</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;rollup&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;cols)</pre>
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 ROLLUP</a> on the DataFrame.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>cols</code> - A list of expressions on columns.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame that you can use to perform aggregations on each group of
     data.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.1.0</dd>
</dl>
</li>
</ul>
<a id="rollup(java.lang.String...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>rollup</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;rollup&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</pre>
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 ROLLUP</a> on the DataFrame.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colNames</code> - A list of column names.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame that you can use to perform aggregations on each group of
     data.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.1.0</dd>
</dl>
</li>
</ul>
<a id="cube(com.snowflake.snowpark_java.Column...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cube</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;cube&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;cols)</pre>
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 CUBE</a> on the DataFrame.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>cols</code> - A list of expressions for columns to use.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="cube(java.lang.String...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cube</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;cube&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>...&nbsp;colNames)</pre>
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 CUBE</a> on the DataFrame.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colNames</code> - A list of column names.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.1.0</dd>
</dl>
</li>
</ul>
<a id="groupByGroupingSets(com.snowflake.snowpark_java.GroupingSets...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>groupByGroupingSets</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;groupByGroupingSets&#8203;(<a href="GroupingSets.html" title="class in com.snowflake.snowpark_java">GroupingSets</a>...&nbsp;sets)</pre>
<div class="block">Performs an SQL <a href="https://docs.snowflake.com/en/sql-reference/constructs/group-by-rollup.html">GROUP BY
 GROUPING SETS</a> on the DataFrame.

 <p>GROUP BY GROUPING SETS is an extension of the GROUP BY clause that allows computing multiple
 group-by clauses in a single statement. The group set is a set of dimension columns.

 <p>GROUP BY GROUPING SETS is equivalent to the UNION of two or more GROUP BY operations in the
 same result set:

 <p><code>df.groupByGroupingSets(GroupingSets.create(Set.of(df.col("a"))))</code> is equivalent to
 <code>df.groupBy("a")</code>

 <p>and

 <p><code>df.groupByGroupingSets(GroupingSets.create(Set.of(df.col("a")),
 Set.of(df.col("b"))))</code> is equivalent to <code>df.groupBy("a") 'union' df.groupBy("b")</code></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sets</code> - A list of GroupingSets objects.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame that you can use to perform aggregations on each group of
     data.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.1.0</dd>
</dl>
</li>
</ul>
<a id="pivot(com.snowflake.snowpark_java.Column,java.lang.Object[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pivot</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;pivot&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;pivotColumn,
                                        <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a>[]&nbsp;values)</pre>
<div class="block">Rotates this DataFrame by turning the unique values from one column in the input expression
 into multiple columns and aggregating results where required on any remaining column values.

 <p>Only one aggregate is supported with pivot.

 <p>For example:

 <pre>
 DataFrame dfPivoted = df.pivot(df.col("col1"), new int[]{1, 2, 3})
   .agg(sum(df.col("col2")));
 </pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>pivotColumn</code> - The name of the column to use.</dd>
<dd><code>values</code> - An array of values in the column.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.2.0</dd>
</dl>
</li>
</ul>
<a id="pivot(java.lang.String,java.lang.Object[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pivot</h4>
<pre class="methodSignature">public&nbsp;<a href="RelationalGroupedDataFrame.html" title="class in com.snowflake.snowpark_java">RelationalGroupedDataFrame</a>&nbsp;pivot&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;pivotColumn,
                                        <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html?is-external=true" title="class or interface in java.lang" class="externalLink">Object</a>[]&nbsp;values)</pre>
<div class="block">Rotates this DataFrame by turning the unique values from one column in the input expression
 into multiple columns and aggregating results where required on any remaining column values.

 <p>Only one aggregate is supported with pivot.

 <p>For example:

 <pre>
 DataFrame dfPivoted = df.pivot("col1", new int[]{1, 2, 3})
   .agg(sum(df.col("col2")));
 </pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>pivotColumn</code> - The name of the column to use.</dd>
<dd><code>values</code> - An array of values in the column.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A RelationalGroupedDataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.2.0</dd>
</dl>
</li>
</ul>
<a id="count()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>count</h4>
<pre class="methodSignature">public&nbsp;long&nbsp;count()</pre>
<div class="block">Executes the query representing this DataFrame and returns the number of rows in the result
 (similar to the COUNT function in SQL). This is an action function.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The number of rows.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.8.0</dd>
</dl>
</li>
</ul>
<a id="col(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>col</h4>
<pre class="methodSignature">public&nbsp;<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;col&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;colName)</pre>
<div class="block">Retrieves a reference to a column in this DataFrame.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>colName</code> - The name of the column</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The target column</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="alias(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>alias</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;alias&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;alias)</pre>
<div class="block">Returns the current DataFrame aliased as the input alias name.

 <p>For example:

 <p>{{{ val df2 = df.alias("A") df2.select(df2.col("A.num")) }}}</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>alias</code> - The alias name of the dataframe</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>a [[DataFrame]]</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.10.0</dd>
</dl>
</li>
</ul>
<a id="collect()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>collect</h4>
<pre class="methodSignature">public&nbsp;<a href="Row.html" title="class in com.snowflake.snowpark_java">Row</a>[]&nbsp;collect()</pre>
<div class="block">Executes the query representing this DataFrame and returns the result as an array of Row
 objects.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The result array</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="toLocalIterator()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toLocalIterator</h4>
<pre class="methodSignature">public&nbsp;<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html?is-external=true" title="class or interface in java.util" class="externalLink">Iterator</a>&lt;<a href="Row.html" title="class in com.snowflake.snowpark_java">Row</a>&gt;&nbsp;toLocalIterator()</pre>
<div class="block">Executes the query representing this DataFrame and returns an iterator of Row objects that you
 can use to retrieve the results.

 <p>Unlike the <code>collect</code> method, this method does not load all data into memory at once.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An Iterator of Row</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="show()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>show</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;show()</pre>
<div class="block">Evaluates this DataFrame and prints out the first ten rows.</div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.9.0</dd>
</dl>
</li>
</ul>
<a id="show(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>show</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;show&#8203;(int&nbsp;n)</pre>
<div class="block">Evaluates this DataFrame and prints out the first `''n''` rows.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>n</code> - The number of rows to print out.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="show(int,int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>show</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;show&#8203;(int&nbsp;n,
                 int&nbsp;maxWidth)</pre>
<div class="block">Evaluates this DataFrame and prints out the first `''n''` rows with the specified maximum
 number of characters per column.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>n</code> - The number of rows to print out.</dd>
<dd><code>maxWidth</code> - The maximum number of characters to print out for each column. If the number of
     characters exceeds the maximum, the method prints out an ellipsis (...) at the end of the
     column.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="createOrReplaceView(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createOrReplaceView</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;createOrReplaceView&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewName)</pre>
<div class="block">Creates a view that captures the computation expressed by this DataFrame.

 <p>For `viewName`, you can include the database and schema name (i.e. specify a fully-qualified
 name). If no database name or schema name are specified, the view will be created in the
 current database or schema.

 <p>`viewName` must be a valid <a href="https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html">Snowflake
 identifier</a></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>viewName</code> - The name of the view to create or replace.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="createOrReplaceView(java.lang.String[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createOrReplaceView</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;createOrReplaceView&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;multipartIdentifier)</pre>
<div class="block">Creates a view that captures the computation expressed by this DataFrame.

 <p>In `multipartIdentifer`, you can include the database and schema name to specify a
 fully-qualified name. If no database name or schema name are specified, the view will be
 created in the current database or schema.

 <p>The view name must be a valid <a href="https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html">Snowflake
 identifier</a></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>multipartIdentifier</code> - A sequence of strings that specifies the database name, schema name,
     and view name.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="createOrReplaceTempView(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createOrReplaceTempView</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;createOrReplaceTempView&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewName)</pre>
<div class="block">Creates a temporary view that returns the same results as this DataFrame.

 <p>You can use the view in subsequent SQL queries and statements during the current session.
 The temporary view is only available in the session in which it is created.

 <p>For `viewName`, you can include the database and schema name (i.e. specify a fully-qualified
 name). If no database name or schema name are specified, the view will be created in the
 current database or schema.

 <p>`viewName` must be a valid <a href="https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html">Snowflake
 identifier</a></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>viewName</code> - The name of the view to create or replace.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="createOrReplaceTempView(java.lang.String[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createOrReplaceTempView</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;createOrReplaceTempView&#8203;(<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>[]&nbsp;multipartIdentifier)</pre>
<div class="block">Creates a temporary view that returns the same results as this DataFrame.

 <p>You can use the view in subsequent SQL queries and statements during the current session.
 The temporary view is only available in the session in which it is created.

 <p>In `multipartIdentifer`, you can include the database and schema name to specify a
 fully-qualified name. If no database name or schema name are specified, the view will be
 created in the current database or schema.

 <p>The view name must be a valid <a href="https://docs.snowflake.com/en/sql-reference/identifiers-syntax.html">Snowflake
 identifier</a></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>multipartIdentifier</code> - A sequence of strings that specify the database name, schema name,
     and view name.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="first()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>first</h4>
<pre class="methodSignature">public&nbsp;<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html?is-external=true" title="class or interface in java.util" class="externalLink">Optional</a>&lt;<a href="Row.html" title="class in com.snowflake.snowpark_java">Row</a>&gt;&nbsp;first()</pre>
<div class="block">Executes the query representing this DataFrame and returns the first row of results.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An Optional Row.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="first(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>first</h4>
<pre class="methodSignature">public&nbsp;<a href="Row.html" title="class in com.snowflake.snowpark_java">Row</a>[]&nbsp;first&#8203;(int&nbsp;n)</pre>
<div class="block">Executes the query representing this DataFrame and returns the first <code>n</code> rows of the
 results.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>n</code> - The number of rows to return.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An Array of the first <code>n</code> Row objects. If <code>n</code> is negative or larger than
     the number of rows in the results, returns all rows in the results.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="sample(long)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sample</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;sample&#8203;(long&nbsp;num)</pre>
<div class="block">Returns a new DataFrame with a sample of N rows from the underlying DataFrame.

 <p>NOTE:

 <p>- If the row count in the DataFrame is larger than the requested number of rows, the method
 returns a DataFrame containing the number of requested rows. - If the row count in the
 DataFrame is smaller than the requested number of rows, the method returns a DataFrame
 containing all rows.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>num</code> - The number of rows to sample in the range of 0 to 1,000,000.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame containing the sample of <code>num</code> rows.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="sample(double)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sample</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;sample&#8203;(double&nbsp;probabilityFraction)</pre>
<div class="block">Returns a new DataFrame that contains a sampling of rows from the current DataFrame.

 <p>NOTE:

 <p>- The number of rows returned may be close to (but not exactly equal to) <code>
 (probabilityFraction * totalRowCount)</code>. - The Snowflake <a href="https://docs.snowflake.com/en/sql-reference/constructs/sample.html">SAMPLE</a> supports
 specifying 'probability' as a percentage number. The range of 'probability' is <code>[0.0,
 100.0]</code>. The conversion formula is <code>probability = probabilityFraction * 100</code>.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>probabilityFraction</code> - The fraction of rows to sample. This must be in the range of `0.0`
     to `1.0`.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame containing the sample of rows.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="randomSplit(double[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>randomSplit</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>[]&nbsp;randomSplit&#8203;(double[]&nbsp;weights)</pre>
<div class="block">Randomly splits the current DataFrame into separate DataFrames, using the specified weights.

 <p>NOTE:

 <p>- If only one weight is specified, the returned DataFrame array only includes the current
 DataFrame. - If multiple weights are specified, the current DataFrame will be cached before
 being split.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>weights</code> - Weights to use for splitting the DataFrame. If the weights don't add up to 1,
     the weights will be normalized.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A list of DataFrame objects</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="flatten(com.snowflake.snowpark_java.Column)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>flatten</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;flatten&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;input)</pre>
<div class="block">Flattens (explodes) compound values into multiple rows (similar to the SQL <a href="https://docs.snowflake.com/en/sql-reference/functions/flatten.html">FLATTEN</a>

 <p>The `flatten` method adds the following <a href="https://docs.snowflake.com/en/sql-reference/functions/flatten.html#output">columns</a> to
 the returned DataFrame:

 <p>- SEQ - KEY - PATH - INDEX - VALUE - THIS

 <p>If <code>this</code> DataFrame also has columns with the names above, you can disambiguate the
 columns by using the <code>this("value")</code> syntax.

 <p>For example, if the current DataFrame has a column named `value`:

 <pre><code>
 DataFrame df = session.sql("select parse_json(value) as value from values('[1,2]') as T(value)");
 DataFrame flattened = df.flatten(df.col("value"));
 flattened.select(df.col("value"), flattened("value").as("newValue")).show();
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>input</code> - The expression that will be unseated into rows. The expression must be of data
     type VARIANT, OBJECT, or ARRAY.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame containing the flattened values.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="flatten(com.snowflake.snowpark_java.Column,java.lang.String,boolean,boolean,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>flatten</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;flatten&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;input,
                         <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;path,
                         boolean&nbsp;outer,
                         boolean&nbsp;recursive,
                         <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;mode)</pre>
<div class="block">Flattens (explodes) compound values into multiple rows (similar to the SQL <a href="https://docs.snowflake.com/en/sql-reference/functions/flatten.html">FLATTEN</a>

 <p>The `flatten` method adds the following <a href="https://docs.snowflake.com/en/sql-reference/functions/flatten.html#output">columns</a> to
 the returned DataFrame:

 <p>- SEQ - KEY - PATH - INDEX - VALUE - THIS

 <p>If <code>this</code> DataFrame also has columns with the names above, you can disambiguate the
 columns by using the <code>this("value")</code> syntax.

 <p>For example, if the current DataFrame has a column named `value`:

 <pre><code>
 DataFrame df = session.sql("select parse_json(value) as value from values('[1,2]') as T(value)");
 DataFrame flattened = df.flatten(df.col("value"), "", false, false, "both");
 flattened.select(df.col("value"), flattened("value").as("newValue")).show();
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>input</code> - The expression that will be unseated into rows. The expression must be of data
     type VARIANT, OBJECT, or ARRAY.</dd>
<dd><code>path</code> - The path to the element within a VARIANT data structure which needs to be
     flattened. Can be a zero-length string (i.e. empty path) if the outermost element is to be
     flattened.</dd>
<dd><code>outer</code> - If FALSE, any input rows that cannot be expanded, either because they cannot be
     accessed in the path or because they have zero fields or entries, are completely omitted
     from the output. Otherwise, exactly one row is generated for zero-row expansions (with NULL
     in the KEY, INDEX, and VALUE columns).</dd>
<dd><code>recursive</code> - If FALSE, only the element referenced by PATH is expanded. Otherwise, the
     expansion is performed for all sub-elements recursively.</dd>
<dd><code>mode</code> - Specifies whether only OBJECT, ARRAY, or BOTH should be flattened.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrame containing the flattened values.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>0.12.0</dd>
</dl>
</li>
</ul>
<a id="write()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>write</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrameWriter.html" title="class in com.snowflake.snowpark_java">DataFrameWriter</a>&nbsp;write()</pre>
<div class="block">Returns a DataFrameWriter object that you can use to write the data in the DataFrame to any
 supported destination. The default SaveMode for the returned DataFrameWriter is <code>
 SaveMode.Append</code>.

 <p>Example:

 <pre><code>
 df.write().saveAsTable("table1");
 </code></pre></div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrameWriter</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.1.0</dd>
</dl>
</li>
</ul>
<a id="na()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>na</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrameNaFunctions.html" title="class in com.snowflake.snowpark_java">DataFrameNaFunctions</a>&nbsp;na()</pre>
<div class="block">Returns a <code>DataFrameNaFunctions</code> object that provides functions for handling missing
 values in the DataFrame.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The DataFrameNaFunctions</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.1.0</dd>
</dl>
</li>
</ul>
<a id="stat()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>stat</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrameStatFunctions.html" title="class in com.snowflake.snowpark_java">DataFrameStatFunctions</a>&nbsp;stat()</pre>
<div class="block">Returns a DataFrameStatFunctions object that provides statistic functions.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The DataFrameStatFunctions</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.1.0</dd>
</dl>
</li>
</ul>
<a id="async()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>async</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrameAsyncActor.html" title="class in com.snowflake.snowpark_java">DataFrameAsyncActor</a>&nbsp;async()</pre>
<div class="block">Returns a DataFrameAsyncActor object that can be used to execute DataFrame actions
 asynchronously.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A DataFrameAsyncActor object</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.2.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.TableFunction,com.snowflake.snowpark_java.Column...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="TableFunction.html" title="class in com.snowflake.snowpark_java">TableFunction</a>&nbsp;func,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>...&nbsp;args)</pre>
<div class="block">Joins the current DataFrame with the output of the specified table function `func`.

 <p>To pass arguments to the table function, use the `args` arguments of this method. In the
 table function arguments, you can include references to columns in this DataFrame.

 <p>For example:

 <pre><code>
 // The following example uses the split_to_table function to split
 // column 'a' in this DataFrame on the character ','.
 // Each row in the current DataFrame will produce N rows in the resulting DataFrame,
 // where N is the number of tokens in the column 'a'.

 df.join(TableFunctions.split_to_table(), df.col("a"), Functions.lit(","))
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>func</code> - TableFunction object, which can be one of the values in the TableFunctions class or
     an object that you create from the TableFunction class.</dd>
<dd><code>args</code> - The functions arguments</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The result DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.2.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.TableFunction,com.snowflake.snowpark_java.Column[],com.snowflake.snowpark_java.Column[],com.snowflake.snowpark_java.Column[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="TableFunction.html" title="class in com.snowflake.snowpark_java">TableFunction</a>&nbsp;func,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;args,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;partitionBy,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;orderBy)</pre>
<div class="block">Joins the current DataFrame with the output of the specified user-defined table function (UDTF)
 `func`.

 <p>To pass arguments to the table function, use the `args` argument of this method. In the
 table function arguments, you can include references to columns in this DataFrame.

 <p>To specify a PARTITION BY or ORDER BY clause, use the `partitionBy` and `orderBy` arguments.

 <p>For example

 <pre><code>
 // The following example passes the values in the column `col1` to the
 // user-defined tabular function (UDTF) `udtf`, partitioning the
 // data by `col2` and sorting the data by `col1`. The example returns
 // a new DataFrame that joins the contents of the current DataFrame with
 // the output of the UDTF.
 df.join(new TableFunction("udtf"),
     new Column[] {df.col("col1")},
     new Column[] {df.col("col2")},
     new Column[] {df.col("col1")});
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>func</code> - An object that represents a user-defined table function (UDTF).</dd>
<dd><code>args</code> - An array of arguments to pass to the specified table function.</dd>
<dd><code>partitionBy</code> - An array of columns partitioned by.</dd>
<dd><code>orderBy</code> - An array of columns ordered by.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The result DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.7.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.TableFunction,java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="TableFunction.html" title="class in com.snowflake.snowpark_java">TableFunction</a>&nbsp;func,
                      <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util" class="externalLink">Map</a>&lt;<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>,&#8203;<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&gt;&nbsp;args)</pre>
<div class="block">Joins the current DataFrame with the output of the specified table function `func` that takes
 named parameters (e.g. `flatten`).

 <p>To pass arguments to the table function, use the `args` argument of this method. Pass in a
 `Map` of parameter names and values. In these values, you can include references to columns in
 this DataFrame.

 <p>For example:

 <pre><code>
 Map&lt;String, Column&gt; args = new HashMap&lt;&gt;();
 args.put("input", Functions.parse_json(df.col("a")));
 df.join(new TableFunction("flatten"), args);
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>func</code> - TableFunction object, which can be one of the values in the TableFunctions class or
     an object that you create from the TableFunction class.</dd>
<dd><code>args</code> - Map of arguments to pass to the specified table function. Some functions, like
     `flatten`, have named parameters. Use this map to specify the parameter names and their
     corresponding values.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The result DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.2.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.TableFunction,java.util.Map,com.snowflake.snowpark_java.Column[],com.snowflake.snowpark_java.Column[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="TableFunction.html" title="class in com.snowflake.snowpark_java">TableFunction</a>&nbsp;func,
                      <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html?is-external=true" title="class or interface in java.util" class="externalLink">Map</a>&lt;<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>,&#8203;<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&gt;&nbsp;args,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;partitionBy,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;orderBy)</pre>
<div class="block">Joins the current DataFrame with the output of the specified user-defined table function (UDTF)
 `func`.

 <p>To pass arguments to the table function, use the `args` argument of this method. Pass in a
 `Map` of parameter names and values. In these values, you can include references to columns in
 this DataFrame.

 <p>To specify a PARTITION BY or ORDER BY clause, use the `partitionBy` and `orderBy` arguments.

 <p>For example:

 <pre><code>
 // The following example passes the values in the column `col1` to the
 // user-defined tabular function (UDTF) `udtf`, partitioning the
 // data by `col2` and sorting the data by `col1`. The example returns
 // a new DataFrame that joins the contents of the current DataFrame with
 // the output of the UDTF.
 Map&lt;String, Column&gt; args = new HashMap&lt;&gt;();
 args.put("arg1", df.col("col1"));
 df.join(
   args,
   new Column[] {df.col("col2")},
   new Column[] {df.col("col1")}
 )
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>func</code> - An object that represents a user-defined table function (UDTF).</dd>
<dd><code>args</code> - Map of arguments to pass to the specified table function. Some functions, like
     `flatten`, have named parameters. Use this map to specify the parameter names and their
     corresponding values.</dd>
<dd><code>partitionBy</code> - An array of columns partitioned by.</dd>
<dd><code>orderBy</code> - An array of columns ordered by.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The result DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.7.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.Column)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;func)</pre>
<div class="block">Joins the current DataFrame with the output of the specified table function `func`.

 <p>Pre-defined table functions can be found in `TableFunctions` class.

 <p>For example:

 <pre><code>
 df.join(TableFunctions.flatten(
   Functions.parse_json(df.col("col")),
   "path", true, true, "both"
 ));
 </code></pre>

 <p>Or load any Snowflake builtin table function via TableFunction Class.

 <pre><code>
 Map&lt;String, Column&gt; args = new HashMap&lt;&gt;();
 args.put("input", Functions.parse_json(df.col("a")));
 df.join(new TableFunction("flatten").call(args));
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>func</code> - Column object, which can be one of the values in the TableFunctions class or an
     object that you create from the `new TableFunction("name").call()`.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The result DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.10.0</dd>
</dl>
</li>
</ul>
<a id="join(com.snowflake.snowpark_java.Column,com.snowflake.snowpark_java.Column[],com.snowflake.snowpark_java.Column[])">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>join</h4>
<pre class="methodSignature">public&nbsp;<a href="DataFrame.html" title="class in com.snowflake.snowpark_java">DataFrame</a>&nbsp;join&#8203;(<a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>&nbsp;func,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;partitionBy,
                      <a href="Column.html" title="class in com.snowflake.snowpark_java">Column</a>[]&nbsp;orderBy)</pre>
<div class="block">Joins the current DataFrame with the output of the specified table function `func`.

 <p>To specify a PARTITION BY or ORDER BY clause, use the `partitionBy` and `orderBy` arguments.

 <p>Pre-defined table functions can be found in `TableFunctions` class.

 <p>For example:

 <pre><code>
 df.join(TableFunctions.flatten(
     Functions.parse_json(df.col("col1")),
     "path", true, true, "both"
   ),
   new Column[] {df.col("col2")},
   new Column[] {df.col("col1")}
 );
 </code></pre>

 <p>Or load any Snowflake builtin table function via TableFunction Class.

 <pre><code>
 Map&lt;String, Column&gt; args = new HashMap&lt;&gt;();
 args.put("input", Functions.parse_json(df.col("col1")));
 df.join(new TableFunction("flatten").call(args),
 new Column[] {df.col("col2")},
 new Column[] {df.col("col1")});
 </code></pre></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>func</code> - Column object, which can be one of the values in the TableFunctions class or an
     object that you create from the `new TableFunction("name").call()`.</dd>
<dd><code>partitionBy</code> - An array of columns partitioned by.</dd>
<dd><code>orderBy</code> - An array of columns ordered by.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The result DataFrame</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.10.0</dd>
</dl>
</li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
</div>
</main>
<!-- ========= END OF CLASS DATA ========= -->
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/DataFrame.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../index-all.html">Index</a></li>
<li><a href="../../../help-doc.html">Help</a></li>
</ul>
<div class="aboutLanguage"><div style="margin-top: 14px"><strong>                           Snowpark Java API Reference 1.12.0 <br/>                           <a style="text-transform: none" href="https://docs.snowflake.com/en/developer-guide/snowpark/java/index.html" target="_top">[Snowpark Developer Guide for Java]</a>                         </strong></div></div>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
<p class="legalCopy"><small>© 2024 Snowflake Inc. All Rights Reserved                                              <!-- Google Analytics Code -->                        <script>                          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){                          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),                          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)                          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');                           ga('create', 'UA-48785629-1', 'auto');                          ga('send', 'pageview');                        </script>                         <!-- Global site tag (gtag.js) - Google Analytics -->                        <script async src="https://www.googletagmanager.com/gtag/js?id=G-00K70YK8HQ"></script>                        <script>                          window.dataLayer = window.dataLayer || [];                          function gtag(){dataLayer.push(arguments);}                          gtag('js', new Date());                          gtag('config', 'G-00K70YK8HQ');                        </script>                         <script>                        if (typeof useModuleDirectories !== 'undefined') {                          useModuleDirectories = false;                        }                        </script></small></p>
</footer>
</body>
</html>
